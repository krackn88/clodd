from gh_copilot_chat import Copilot
import asyncio
import requests

class MCPClient:
    """
    Client for interacting with Anthropic's Model Context Protocol (MCP) API.
    """

    def __init__(self, api_key: str, base_url: str = "https://api.anthropic.com/v1"):
        """
        Initialize the MCP client.

        Args:
            api_key: API key for authenticating with the MCP API.
            base_url: Base URL for the MCP API.
        """
        self.api_key = api_key
        self.base_url = base_url

    async def enhance_prompt_with_copilot(self, prompt: str) -> str:
        """
        Enhance a given prompt using GitHub Copilot.

        Args:
            prompt: The input prompt to enhance.

        Returns:
            The enhanced prompt generated by Copilot.
        """
        async with Copilot() as copilot:
            thread_id = await copilot.new_chat()
            response = await copilot.send_message(thread_id, prompt)
            return response

    def send_message(self, model: str, prompt: str, max_tokens: int = 256, use_copilot: bool = False) -> dict:
        """
        Send a message to the MCP API, optionally enhancing the prompt with Copilot.

        Args:
            model: The model to use for the request.
            prompt: The input prompt for the model.
            max_tokens: The maximum number of tokens to generate.
            use_copilot: Whether to enhance the prompt using Copilot.

        Returns:
            The response from the MCP API.
        """
        if use_copilot:
            loop = asyncio.get_event_loop()
            prompt = loop.run_until_complete(self.enhance_prompt_with_copilot(prompt))

        url = f"{self.base_url}/completions"
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        payload = {
            "model": model,
            "prompt": prompt,
            "max_tokens": max_tokens
        }

        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        return response.json()

    def get_models(self) -> list:
        """
        Retrieve the list of available models from the MCP API.

        Returns:
            A list of available models.
        """
        url = f"{self.base_url}/models"
        headers = {
            "Authorization": f"Bearer {self.api_key}"
        }

        response = requests.get(url, headers=headers)
        response.raise_for_status()
        return response.json().get("models", [])
